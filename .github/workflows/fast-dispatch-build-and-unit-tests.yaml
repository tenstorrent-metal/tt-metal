name: "[internal] Fast dispatch unit tests impl"

on:
  workflow_call:

jobs:
  fd-ttnn-tests:
    uses: ./.github/workflows/ttnn-post-commit.yaml
    secrets: inherit
  fd-model-tests:
    uses: ./.github/workflows/models-post-commit.yaml
    secrets: inherit
  fd-cpp-tests:
    uses: ./.github/workflows/cpp-post-commit.yaml
    secrets: inherit
  fd-tests:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          # E150
          {arch: grayskull, runs-on: ["grayskull"], name: E150},
          # N150
          {arch: wormhole_b0, runs-on: ["wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-1"], name: N150},
          # N300
          {arch: wormhole_b0, runs-on: ["wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-2"], name: N300},
        ]
        test-group: [
          {name: fallback-backward-loss-ops, cmd: ./tests/scripts/run_python_unit_test_ops.sh},
          {name: misc group 1, cmd: pytest $TT_METAL_HOME/tests/tt_eager/python_api_testing/unit_testing/misc/ -vvv --splits 3 --group 1 },
          {name: misc group 2, cmd: pytest $TT_METAL_HOME/tests/tt_eager/python_api_testing/unit_testing/misc/ -vvv --splits 3 --group 2 },
          {name: misc group 3, cmd: pytest $TT_METAL_HOME/tests/tt_eager/python_api_testing/unit_testing/misc/ -vvv --splits 3 --group 3 },
          {name: sweep, cmd: ./tests/scripts/run_python_sweep_tests.sh},
        ]
    name: ${{ matrix.test-group.name }} ${{ matrix.runner-info.arch }} ${{ matrix.runner-info.name }}
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      CONFIG: ci
      LOGURU_LEVEL: INFO
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
      TT_METAL_WATCHER: 60
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: ${{ matrix.test-group.name }} tests
        timeout-minutes: 45
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ${{ matrix.test-group.cmd }}
      - name: Upload watcher log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: watcher-log-${{ matrix.runner-info.arch }}-${{ matrix.runner-info.name }}
          path: built/watcher.log
  build-docs:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          # E150
          {arch: grayskull, runs-on: ["grayskull"]},
          # N150
          {arch: wormhole_b0, runs-on: ["wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-1"]},
          # N300
          {arch: wormhole_b0, runs-on: ["wormhole_b0", "multi-chip-num-pcie-1", "multi-chip-num-chips-2"]},
        ]
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      LOGURU_LEVEL: INFO
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: Build Docs
        timeout-minutes: 15
        run: |
          source $HOME/python_env/bin/activate
          cd $TT_METAL_HOME
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_build_docs.sh

  multi-queue-single-device-tests:
    strategy:
      # Do not fail-fast because we need to ensure all tests go to completion
      # so we try not to get hanging machines
      fail-fast: false
      matrix:
        runner-info: [
          {arch: grayskull, runs-on: ["grayskull"]},
        ]
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      LOGURU_LEVEL: INFO
      CONFIG: ci
      LD_LIBRARY_PATH: ${{ github.workspace }}/build/lib
    runs-on: ${{ matrix.runner-info.runs-on }}
    steps:
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dyanmic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
      - uses: actions/download-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.runner-info.arch }}
      - name: Extract files
        run: tar -xvf ttm_${{ matrix.runner-info.arch }}.tar
      - name: Build python env
        run: |
          make python_env/dev PYTHON_ENV=$HOME/python_env -B
      - name: multi-queue-single-device
        timeout-minutes: 5
        run: |
          source $HOME/python_env/bin/activate
          export PYTHONPATH=$TT_METAL_HOME
          ./tests/scripts/run_tests.sh --tt-arch $ARCH_NAME --pipeline-type post_commit --dispatch-mode fast-multi-queue-single-device
